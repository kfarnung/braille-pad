{"version":3,"sources":["Data/LocalStorageComponent.ts","Data/LocalStorage.ts","version.ts","Solvers/WordSearchComponent.tsx","Views/Solvers/WordSearch.tsx"],"names":["LocalStorageComponent","props","_this","Object","_home_travis_build_kfarnung_puzztool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_travis_build_kfarnung_puzztool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_kfarnung_puzztool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","VERSION_STORAGE_KEY","previousVersion","LocalStorage","getObject","versionIncreased","version","clear","setObject","prev","current","compareVersions","restoreState","updateState","onUpdateState","saveState","getLocalStorageKey","onSaveState","onRestoreState","Component","undefined","_isSupported","storage","window","localStorage","x","setItem","removeItem","e","DOMException","code","name","length","key","isSupported","getItem","getKey","objString","JSON","parse","value","object","stringify","concat","_prefix","__webpack_require__","d","__webpack_exports__","WordSearchComponent","classCallCheck","possibleConstructorReturn","getPrototypeOf","_input","React","createRef","_gridInputText","_wordListInputText","_useCardinals","_useDiagonals","state","gridInputText","wordListInputText","useCardinals","useDiagonals","get","prototype","element","focus","_this2","react_default","a","createElement","className","Container_default","fluid","Row_default","Col_default","md","Card_default","Header","FormControl_default","as","label","onChange","event","onListTextChanged","placeholder","renderEmptyDirection","FormCheck_default","checked","id","onDiagonalCheckboxChange","type","onCardinalCheckboxChange","onGridTextChanged","ref","spellCheck","Table_default","borderless","renderOutput","savedState","setState","target","Alert_default","variant","trim","charArray","lines","split","wordsToFind","filter","word","wordSearchDirection","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","line","push","err","return","WordSearchDirection","CardinalAndDiagonal","Cardinal","Diagonal","None","solver","WordSearchSolver","setDirections","setGrid","setWords","results","findWords","shoudHighlight","highlightArray","result","y","row","reactKey","toString","inputGrid","shouldHighlight","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","hightlightLine","Array","from","v","i","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","_iteratorNormalCompletion4","_didIteratorError4","_iteratorError4","_step4","_iterator4","points","point","WordSearch","src_Solvers_WordSearchComponent"],"mappings":"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","file":"static/js/16.0135e374.chunk.js","sourcesContent":["import compareVersions from 'compare-versions';\nimport { Component } from 'react';\nimport LocalStorage from './LocalStorage';\nimport { version } from '../version';\n\nabstract class LocalStorageComponent<P = {}, S = {}, SavedState = {}> extends Component<P, S> {\n  public constructor(props: P) {\n    super(props);\n\n    // If the current localstorage was created with a prior version of puzztool, clear\n    // the local storage to get rid of any obsolete or incompatible artifacts\n    const previousVersion = LocalStorage.getObject<string>(this.VERSION_STORAGE_KEY);\n    if (this.versionIncreased(previousVersion, version)) {\n      LocalStorage.clear();\n      // Store the current version\n      LocalStorage.setObject<string>(this.VERSION_STORAGE_KEY, version);\n    }\n  }\n\n  private versionIncreased(prev: string | null, current: string): boolean {\n    if (prev == null) {\n      // If there's no recorded version number, this is the user's first visit\n      // to the page since 0.7.0 released.  To clean up any potential legacy\n      // incompatabilities, clear storage and write the version.\n      return true;\n    }\n\n    return compareVersions(current, prev) === 1;\n  }\n\n  public componentDidMount() {\n    this.restoreState();\n    this.updateState();\n  }\n\n  protected updateState() {\n    this.onUpdateState();\n    this.saveState();\n  }\n\n  protected abstract getLocalStorageKey(): string;\n  protected abstract onSaveState(): SavedState;\n  protected abstract onRestoreState(savedState: SavedState | null): void;\n  protected abstract onUpdateState(): void;\n\n  private saveState() {\n    LocalStorage.setObject<SavedState>(this.getLocalStorageKey(), this.onSaveState());\n  }\n\n  private restoreState() {\n    this.onRestoreState(LocalStorage.getObject<SavedState>(this.getLocalStorageKey()));\n  }\n\n  private readonly VERSION_STORAGE_KEY: string = \"puzztoolVersion\";\n}\n\nexport default LocalStorageComponent;\n","class LocalStorage {\n  private static _isSupported?: boolean;\n  private static _prefix: string = 'puzztool';\n\n  public static isSupported() {\n    if (this._isSupported === undefined) {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n\n      try {\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        this._isSupported = true;\n      } catch (e) {\n          this._isSupported = e instanceof DOMException && (\n            // everything except Firefox\n            e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === 'QuotaExceededError' ||\n            // Firefox\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            storage.length !== 0;\n      }\n    }\n\n    return this._isSupported;\n  }\n\n  public static getItem(key: string) {\n    if (this.isSupported()) {\n      return window.localStorage.getItem(this.getKey(key));\n    }\n\n    return null;\n  }\n\n  public static getObject<T>(key: string) {\n    if (this.isSupported()) {\n      const objString = window.localStorage.getItem(this.getKey(key));\n\n      if (objString !== null) {\n        return JSON.parse(objString) as T;\n      }\n    }\n\n    return null;\n  }\n\n  public static setItem(key: string, value: string) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), value);\n    }\n  }\n\n  public static setObject<T>(key: string, object: T) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), JSON.stringify(object));\n    }\n  }\n\n  public static clear() {\n    if (this.isSupported()) {\n      window.localStorage.clear();\n    }\n  }\n\n  private static getKey(key: string) {\n    return `${this._prefix}_${key}`;\n  }\n}\n\nexport default LocalStorage;\n","// generated by genversion\nexport const version = '0.7.0';\n","import React, { FormEvent } from 'react';\r\nimport Alert from 'react-bootstrap/Alert';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Container from 'react-bootstrap/Container';\r\nimport FormCheck from 'react-bootstrap/FormCheck';\r\nimport FormControl, { FormControlProps } from 'react-bootstrap/FormControl';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Table from 'react-bootstrap/Table';\r\nimport { WordSearchSolver, WordSearchResult, WordSearchDirection } from 'puzzle-lib';\r\nimport LocalStorageComponent from '../Data/LocalStorageComponent';\r\nimport './WordSearchComponent.scss';\r\n\r\ntype Props = {};\r\ntype State = {\r\n  gridInputText: string,\r\n  wordListInputText: string,\r\n  useDiagonals: boolean,\r\n  useCardinals: boolean,\r\n};\r\n\r\ntype SavedState = {\r\n  gridInputText: string,\r\n  wordListInputText: string,\r\n  useDiagonals: boolean,\r\n  useCardinals: boolean,\r\n};\r\n\r\nclass WordSearchComponent extends LocalStorageComponent<Props, State, SavedState> {\r\n  private readonly _input = React.createRef<FormControl<\"textarea\"> & HTMLTextAreaElement>();\r\n  private _gridInputText: string = '';\r\n  private _wordListInputText: string = '';\r\n  private _useCardinals: boolean = true;\r\n  private _useDiagonals: boolean = true;\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      gridInputText: '',\r\n      wordListInputText: '',\r\n      useCardinals: true,\r\n      useDiagonals: true,\r\n    };\r\n  }\r\n\r\n  public componentDidMount() {\r\n    super.componentDidMount();\r\n\r\n    const element = this._input.current;\r\n    if (element) {\r\n      element.focus();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <div className=\"WordSearchComponent\">\r\n        <Container fluid={true}>\r\n          <Row>\r\n            <Col md={4}>\r\n              <Card className=\"WordSearchComponent-ListInput\">\r\n                <Card.Header>Enter the list of words to find, one word per line</Card.Header>\r\n                <FormControl\r\n                  as=\"textarea\"\r\n                  className=\"WordSearchComponent-ListInput\"\r\n                  label=\"Enter the word search grid, one row of letters per line\"\r\n                  onChange={(event: FormEvent<FormControlProps>) => this.onListTextChanged(event)}\r\n                  placeholder=\"Word List To Find\"\r\n                  value={this.state.wordListInputText}\r\n                />\r\n                {this.renderEmptyDirection()}\r\n                <FormCheck\r\n                  checked={this._useDiagonals}\r\n                  id=\"WordSearchComponent-checkbox-diagonal\"\r\n                  label=\"Use diagonal directions\"\r\n                  onChange={\r\n                    (event: FormEvent<HTMLInputElement>) => this.onDiagonalCheckboxChange(event)\r\n                  }\r\n                  type=\"checkbox\"\r\n                />\r\n                <FormCheck\r\n                  checked={this._useCardinals}\r\n                  id=\"WordSearchComponent-checkbox-cardinal\"\r\n                  label=\"Use cardinal directions\"\r\n                  onChange={\r\n                    (event: FormEvent<HTMLInputElement>) => this.onCardinalCheckboxChange(event)\r\n                  }\r\n                  type=\"checkbox\"\r\n                />\r\n              </Card>\r\n            </Col>\r\n            <Col md={8}>\r\n              <Card className=\"WordSearchComponent-GridInput\">\r\n                <Card.Header>Enter the word search grid, one row of letters per line</Card.Header>\r\n                <FormControl\r\n                  as=\"textarea\"\r\n                  onChange={(event: FormEvent<FormControlProps>) => this.onGridTextChanged(event)}\r\n                  placeholder=\"Grid Text\"\r\n                  ref={this._input}\r\n                  spellCheck={false}\r\n                  value={this.state.gridInputText}\r\n                />\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col md={12}>\r\n              <Card className=\"WordSearchComponent-GridOutput\">\r\n                <Card.Header>Output</Card.Header>\r\n                <Table className=\"WordSearchComponent-TableOutput\" borderless={true}>\r\n                  <tbody>\r\n                    {this.renderOutput()}\r\n                  </tbody>\r\n                </Table>\r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  protected getLocalStorageKey() {\r\n    return 'WordSearchComponent';\r\n  }\r\n\r\n  protected onSaveState() {\r\n    return {\r\n      gridInputText: this._gridInputText,\r\n      wordListInputText: this._wordListInputText,\r\n      useDiagonals: this._useDiagonals,\r\n      useCardinals: this._useCardinals,\r\n    };\r\n  }\r\n\r\n  protected onRestoreState(savedState: SavedState | null) {\r\n    if (savedState !== null) {\r\n      this._gridInputText = savedState.gridInputText;\r\n      this._wordListInputText = savedState.wordListInputText;\r\n      this._useDiagonals = savedState.useDiagonals;\r\n      this._useCardinals = savedState.useCardinals;\r\n    }\r\n  }\r\n\r\n  protected onUpdateState() {\r\n    this.setState({\r\n      gridInputText: this._gridInputText,\r\n      wordListInputText: this._wordListInputText,\r\n      useDiagonals: this._useDiagonals,\r\n      useCardinals: this._useCardinals,\r\n    });\r\n  }\r\n\r\n  private onGridTextChanged(event: FormEvent<FormControlProps>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._gridInputText = element.value;\r\n    this.updateState();\r\n  }\r\n\r\n  private onListTextChanged(event: FormEvent<FormControlProps>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._wordListInputText = element.value;\r\n    this.updateState();\r\n  }\r\n\r\n  private onCardinalCheckboxChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._useCardinals = element.checked;\r\n    this.updateState();\r\n  }\r\n\r\n  private onDiagonalCheckboxChange(event: FormEvent<HTMLInputElement>) {\r\n    const element = (event.target as HTMLInputElement);\r\n    this._useDiagonals = element.checked;\r\n    this.updateState();\r\n  }\r\n\r\n  private renderEmptyDirection() {\r\n    if (this._useCardinals || this._useDiagonals) {\r\n      return null;\r\n    }\r\n\r\n    return (\r\n      <Alert variant=\"warning\">\r\n        No directions are checked. No results will be shown.\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  private renderOutput() {\r\n    // Save work if possible\r\n    if (!this._gridInputText.trim()) {\r\n      return [];\r\n    }\r\n\r\n    // get inputs\r\n    const lines = this._gridInputText.split(/\\r?\\n/);\r\n    const wordList = this._wordListInputText.split(/\\r?\\n/);\r\n\r\n    const wordsToFind = wordList.filter(word => word.length > 0);\r\n\r\n    let charArray: string[][];\r\n    charArray = [];\r\n    for (const line of lines) {\r\n      charArray.push(line.split(''));\r\n    }\r\n\r\n    let wordSearchDirection: WordSearchDirection;\r\n    if (this._useCardinals && this._useDiagonals) {\r\n      wordSearchDirection = WordSearchDirection.CardinalAndDiagonal;\r\n    } else if (this._useCardinals) {\r\n      wordSearchDirection = WordSearchDirection.Cardinal;\r\n    } else if (this._useDiagonals) {\r\n      wordSearchDirection = WordSearchDirection.Diagonal;\r\n    } else {\r\n      wordSearchDirection = WordSearchDirection.None;\r\n    }\r\n\r\n    // find the results\r\n    const solver = new WordSearchSolver();\r\n    solver.setDirections(wordSearchDirection);\r\n    solver.setGrid(charArray);\r\n    solver.setWords(wordsToFind);\r\n    const results = solver.findWords();\r\n\r\n    // display / highlight the results\r\n    const shoudHighlight = this.highlightArray(charArray, results);\r\n\r\n    let result = [];\r\n\r\n    for (let y = 0; y < charArray.length; y++) {\r\n      let row = [];\r\n      for (let x = 0; x < charArray[y].length; x++) {\r\n        let reactKey = x.toString() + y.toString();\r\n        if (shoudHighlight[y][x] !== 0) {\r\n          row.push(<td key={reactKey} className=\"WordSearchComponent-HighlightChar\">{charArray[y][x]}</td>);\r\n        } else {\r\n          row.push(<td key={reactKey}>{charArray[y][x]}</td>);\r\n        }\r\n      }\r\n\r\n      result.push(<tr key={y}>{row}</tr>);\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private highlightArray(inputGrid: string[][], results: WordSearchResult[]) {\r\n    let shouldHighlight: number[][];\r\n    shouldHighlight = [];\r\n\r\n    for (const line of inputGrid) {\r\n      const hightlightLine = Array.from({ length: line.length }, (v, i) => 0);\r\n      shouldHighlight.push(hightlightLine);\r\n    }\r\n\r\n    for (const result of results) {\r\n      for (const point of result.points) {\r\n        shouldHighlight[point.y][point.x] = 1;\r\n      }\r\n    }\r\n\r\n    return shouldHighlight;\r\n  }\r\n}\r\n\r\nexport default WordSearchComponent;\r\n","import React, { Component } from 'react';\r\nimport WordSearchComponent from '../../Solvers/WordSearchComponent';\r\nimport './WordSearch.scss';\r\n\r\nclass WordSearch extends Component {\r\n  public render() {\r\n    return (\r\n      <div className=\"WordSearch\">\r\n        <h2>Word Search</h2>\r\n        <WordSearchComponent />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default WordSearch;\r\n"],"sourceRoot":""}