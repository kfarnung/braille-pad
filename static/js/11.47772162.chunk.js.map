{"version":3,"sources":["Data/LocalStorageComponent.ts","Data/LocalStorage.ts","Conversion/Character/CharacterTable.tsx","Conversion/Character/AsciiTable.tsx","Conversion/Character/OrdinalTable.tsx","Views/Reference/CharacterEncodings.tsx"],"names":["LocalStorageComponent","this","restoreState","updateState","onUpdateState","saveState","LocalStorage","setObject","getLocalStorageKey","onSaveState","onRestoreState","getObject","Component","undefined","_isSupported","storage","window","localStorage","x","setItem","removeItem","e","DOMException","code","name","length","key","isSupported","getItem","getKey","objString","JSON","parse","value","object","stringify","clear","concat","_prefix","CharacterTable","react_default","a","createElement","className","Table","striped","responsive","renderRows","props","data","map","character","binary","ternary","octal","decimal","hexadecimal","toUpperCase","AsciiTable","Conversion_Character_CharacterTable","Conversion","getAsciiTable","OrdinalTable","getOrdinalTable","CharacterEncodings","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_activeKey","state","activeKey","_this2","Tabs","animation","id","onSelect","onTabSelect","Tab","eventKey","title","Conversion_Character_AsciiTable","Conversion_Character_OrdinalTable","savedState","setState"],"mappings":"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","file":"static/js/11.47772162.chunk.js","sourcesContent":["import { Component } from 'react';\nimport LocalStorage from './LocalStorage';\n\nabstract class LocalStorageComponent<P = {}, S = {}, SavedState = {}> extends Component<P, S> {\n  public componentDidMount() {\n    this.restoreState();\n    this.updateState();\n  }\n\n  protected updateState() {\n    this.onUpdateState();\n    this.saveState();\n  }\n\n  protected abstract getLocalStorageKey(): string;\n  protected abstract onSaveState(): SavedState;\n  protected abstract onRestoreState(savedState: SavedState | null): void;\n  protected abstract onUpdateState(): void;\n\n  private saveState() {\n    LocalStorage.setObject<SavedState>(this.getLocalStorageKey(), this.onSaveState());\n  }\n\n  private restoreState() {\n    this.onRestoreState(LocalStorage.getObject<SavedState>(this.getLocalStorageKey()));\n  }\n}\n\nexport default LocalStorageComponent;\n","class LocalStorage {\n  private static _isSupported?: boolean;\n  private static _prefix: string = 'puzztool';\n\n  public static isSupported() {\n    if (this._isSupported === undefined) {\n      const storage = window.localStorage;\n      const x = '__storage_test__';\n\n      try {\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        this._isSupported = true;\n      } catch (e) {\n          this._isSupported = e instanceof DOMException && (\n            // everything except Firefox\n            e.code === 22 ||\n            // Firefox\n            e.code === 1014 ||\n            // test name field too, because code might not be present\n            // everything except Firefox\n            e.name === 'QuotaExceededError' ||\n            // Firefox\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            // acknowledge QuotaExceededError only if there's something already stored\n            storage.length !== 0;\n      }\n    }\n\n    return this._isSupported;\n  }\n\n  public static getItem(key: string) {\n    if (this.isSupported()) {\n      return window.localStorage.getItem(this.getKey(key));\n    }\n\n    return null;\n  }\n\n  public static getObject<T>(key: string) {\n    if (this.isSupported()) {\n      const objString = window.localStorage.getItem(this.getKey(key));\n\n      if (objString !== null) {\n        return JSON.parse(objString) as T;\n      }\n    }\n\n    return null;\n  }\n\n  public static setItem(key: string, value: string) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), value);\n    }\n  }\n\n  public static setObject<T>(key: string, object: T) {\n    if (this.isSupported()) {\n      window.localStorage.setItem(this.getKey(key), JSON.stringify(object));\n    }\n  }\n\n  public static clear() {\n    if (this.isSupported()) {\n      window.localStorage.clear();\n    }\n  }\n\n  private static getKey(key: string) {\n    return `${this._prefix}_${key}`;\n  }\n}\n\nexport default LocalStorage;\n","import React, { Component } from 'react';\nimport { Table } from 'react-bootstrap';\nimport { CharacterTableEntry as Entry } from 'puzzle-lib';\nimport './CharacterTable.css';\n\ntype Props = {\n  data: Entry[],\n};\n\nclass CharacterTable extends Component<Props> {\n  public render() {\n    return (\n      <div className=\"CharacterTable\">\n        <Table striped={true} responsive={true}>\n          <thead>\n            <tr>\n              <th>Character</th>\n              <th>Binary</th>\n              <th>Ternary</th>\n              <th>Octal</th>\n              <th>Decimal</th>\n              <th>Hexadecimal</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.renderRows(this.props.data)}\n          </tbody>\n        </Table>\n      </div>\n    );\n  }\n\n  private renderRows(data: Entry[]) {\n    return data.map((value: Entry) => {\n      return (\n        <tr key={value.character}>\n          <td>{value.character}</td>\n          <td>{value.binary}</td>\n          <td>{value.ternary}</td>\n          <td>{value.octal}</td>\n          <td>{value.decimal}</td>\n          <td>{value.hexadecimal.toUpperCase()}</td>\n        </tr>\n      );\n    });\n  }\n}\n\nexport default CharacterTable;\n","import React, { Component } from 'react';\nimport { CharacterConversion as Conversion } from 'puzzle-lib';\nimport CharacterTable from './CharacterTable';\nimport './AsciiTable.css';\n\nclass AsciiTable extends Component {\n  public render() {\n    return (\n      <div className=\"AsciiTable\">\n        <CharacterTable data={Conversion.getAsciiTable()} />\n      </div>\n    );\n  }\n}\n\nexport default AsciiTable;\n","import React, { Component } from 'react';\nimport { CharacterConversion as Conversion } from 'puzzle-lib';\nimport CharacterTable from './CharacterTable';\nimport './OrdinalTable.css';\n\nclass OrdinalTable extends Component {\n  public render() {\n    return (\n      <div className=\"OrdinalTable\">\n        <CharacterTable data={Conversion.getOrdinalTable()} />\n      </div>\n    );\n  }\n}\n\nexport default OrdinalTable;\n","import React from 'react';\nimport { Tab, Tabs } from 'react-bootstrap';\nimport AsciiTable from '../../Conversion/Character/AsciiTable';\nimport OrdinalTable from '../../Conversion/Character/OrdinalTable';\nimport LocalStorageComponent from '../../Data/LocalStorageComponent';\nimport './CharacterEncodings.css';\n\ntype Props = {};\ntype State = {\n  activeKey: number,\n};\n\ntype SavedState = {\n  activeKey: number,\n};\n\nclass CharacterEncodings extends LocalStorageComponent<Props, State, SavedState> {\n  private _activeKey: number = 1;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      activeKey: this._activeKey,\n    };\n  }\n\n  public render() {\n    return (\n      <div className=\"CharacterEncodings\">\n        <div className=\"CharacterEncodings-content\">\n          <Tabs\n            activeKey={this.state.activeKey}\n            animation={false}\n            id=\"CharacterEncodings-tabs\"\n            // tslint:disable-next-line: no-any\n            onSelect={(activeKey: any) => this.onTabSelect(activeKey as number)}\n          >\n            <Tab eventKey={1} title=\"ASCII\">\n              <AsciiTable />\n            </Tab>\n            <Tab eventKey={2} title=\"Ordinal\">\n              <OrdinalTable />\n            </Tab>\n          </Tabs>\n        </div>\n      </div>\n    );\n  }\n\n  protected getLocalStorageKey() {\n    return 'CharacterEncodings';\n  }\n\n  protected onSaveState() {\n    return {\n      activeKey: this._activeKey,\n    };\n  }\n\n  protected onRestoreState(savedState: SavedState | null) {\n    if (savedState !== null) {\n      this._activeKey = savedState.activeKey;\n    }\n  }\n\n  protected onUpdateState() {\n    this.setState({\n      activeKey: this._activeKey,\n    });\n  }\n\n  private onTabSelect(activeKey: number) {\n    this._activeKey = activeKey;\n    this.updateState();\n  }\n}\n\nexport default CharacterEncodings;\n"],"sourceRoot":""}