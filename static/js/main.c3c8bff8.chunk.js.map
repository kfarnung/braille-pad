{"version":3,"sources":["Data/RouteData.ts","Nav/AppNavCategory.tsx","Nav/AppNav.tsx","Views/Loading.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getCategories","children","description","name","url","rootUrl","NavbarCategory","props","categoryName","category","key","onClick","e","preventDefault","to","NavDropdown","id","toLowerCase","replace","concat","title","map","child","Item","eventKey","AppNav","Navbar","bg","className","collapseOnSelect","expand","onSelect","document","activeElement","blur","sticky","variant","Brand","Toggle","Collapse","Nav","Link","href","target","Loading","error","timedOut","pastDelay","WordSearch","Loadable","loader","loading","timeout","AutoConvert","Autokey","Braille","Caesar","CharacterEncodings","Home","Morse","NatoAlphabet","NavalFlags","PigpenReference","Resistors","Semaphore","Settings","Vigenere","App","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.c3c8bff8.chunk.js","sourcesContent":["export interface RouteChild {\r\n  description: string;\r\n  name: string;\r\n  url: string;\r\n}\r\n\r\nexport interface RouteCategory {\r\n  children: RouteChild[];\r\n  description: string;\r\n  name: string;\r\n  rootUrl: string;\r\n}\r\n\r\nexport function getCategories(): RouteCategory[] {\r\n  return [\r\n    {\r\n      children: [\r\n        {\r\n          description: 'Word Search Solver',\r\n          name: 'Word Search',\r\n          url: '/wordsearch',\r\n        },\r\n      ],\r\n      description: 'Automated puzzle solvers',\r\n      name: 'Solvers',\r\n      rootUrl: '/solvers',\r\n    },\r\n    {\r\n      children: [\r\n        {\r\n          description: ' A Vignere cipher which uses plaintext as the key',\r\n          name: 'Autokey',\r\n          url: '/autokey',\r\n        },\r\n        {\r\n          description: 'Letters are shifted by a fixed value',\r\n          name: 'Caesar',\r\n          url: '/caesar',\r\n        },\r\n        {\r\n          description: 'Letters are mapped based on a key word',\r\n          name: 'Vignere',\r\n          url: '/vigenere',\r\n        },\r\n      ],\r\n      description: 'Scrambled letters',\r\n      name: 'Ciphers',\r\n      rootUrl: '/cipher',\r\n    },\r\n    {\r\n      children: [\r\n        {\r\n          description: 'Mapping numbers to letters (ASCII, Binary, Ordinal)',\r\n          name: 'AutoConvert',\r\n          url: '/autoconvert',\r\n        },\r\n        {\r\n          description: 'Six dots in a two-by-three grid',\r\n          name: 'Braille',\r\n          url: '/braille',\r\n        },\r\n        {\r\n          description: 'Dots and dashes with separations',\r\n          name: 'Morse Code',\r\n          url: '/morse',\r\n        },\r\n        {\r\n          description: 'Parts of a tic-tac-toe grid or X, some with dot',\r\n          name: 'Pigpen',\r\n          url: '/pigpen',\r\n        },\r\n        {\r\n          description: ' Positions of two different flags',\r\n          name: 'Semaphore',\r\n          url: '/semaphore',\r\n        },\r\n      ],\r\n      description: 'Different ways to represent letters',\r\n      name: 'Encodings',\r\n      rootUrl: '/encoding',\r\n    },\r\n    {\r\n      children: [\r\n        {\r\n          description: 'Static display of number to letter mapping',\r\n          name: 'Character Encodings',\r\n          url: '/characterencodings',\r\n        },\r\n        {\r\n          description: 'Words used to clearly identify a letter',\r\n          name: 'NATO Alphabet',\r\n          url: '/nato',\r\n        },\r\n        {\r\n          description: 'Different simple flags which convey a letter',\r\n          name: 'Naval Flags',\r\n          url: '/navalflags',\r\n        },\r\n        {\r\n          description: 'Find a resistor value using different colored bands',\r\n          name: 'Resistors',\r\n          url: '/resistors',\r\n        }\r\n      ],\r\n      description: 'Miscellaneous information',\r\n      name: 'Reference',\r\n      rootUrl: '/reference',\r\n    }\r\n  ];\r\n}\r\n","import React from 'react';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { RouteCategory } from '../Data/RouteData';\n\ninterface Props {\n  category: RouteCategory;\n}\n\nfunction getCategoryDropdownId(categoryName: string) {\n  return categoryName.toLowerCase().replace(/[^a-z]/, '').concat('-dropdown');\n}\n\nfunction NavbarCategory(props: Props) {\n  const name = props.category.name;\n  const rootUrl = props.category.rootUrl;\n\n  return (\n    <LinkContainer\n      key={name}\n      onClick={(e) => e.preventDefault()}\n      to={rootUrl}\n    >\n      <NavDropdown\n        id={getCategoryDropdownId(name)}\n        title={name}\n      >\n        {props.category.children.map((child) => (\n          <LinkContainer\n            key={`${name}-${child.name}`}\n            to={rootUrl + child.url}\n          >\n            <NavDropdown.Item eventKey={name + child.name}>\n              {child.name}\n            </NavDropdown.Item>\n          </LinkContainer>\n        ))}\n      </NavDropdown>\n    </LinkContainer>\n  );\n}\n\nexport default NavbarCategory;\n","import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport { getCategories } from '../Data/RouteData';\nimport NavbarCategory from './AppNavCategory';\nimport './AppNav.scss';\n\nfunction AppNav() {\n  return (\n    <Navbar\n      bg=\"dark\"\n      className=\"AppNav\"\n      collapseOnSelect={true}\n      expand=\"md\"\n      // Remove focus from the selected element to prevent it from taking\n      // further keyboard input.\n      onSelect={() => (document.activeElement as HTMLElement).blur()}\n      sticky=\"top\"\n      variant=\"dark\"\n    >\n      <LinkContainer to=\"/\">\n        <Navbar.Brand>PuzzTool</Navbar.Brand>\n      </LinkContainer>\n      <Navbar.Toggle />\n      <Navbar.Collapse>\n        <Nav>\n          {getCategories().map(\n            category => <NavbarCategory key={category.name} category={category} />)}\n        </Nav>\n        <Nav>\n          <LinkContainer to=\"/help\" onClick={(e) => e.preventDefault()}>\n            <NavDropdown title=\"Help\" id=\"help-dropdown\">\n              <LinkContainer to=\"/help/settings\">\n                <NavDropdown.Item eventKey=\"Help.Settings\">Settings</NavDropdown.Item>\n              </LinkContainer>\n            </NavDropdown>\n          </LinkContainer>\n          <Nav.Link\n            eventKey=\"Help.Feedback\"\n            href=\"https://github.com/puzztool/puzztool/issues/new\"\n            target=\"_blank\"\n          >\n            Feedback\n          </Nav.Link>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default AppNav;\n","import React from 'react';\nimport './Loading.scss';\nimport { LoadingComponentProps } from 'react-loadable';\n\nfunction Loading(props: LoadingComponentProps) {\n  function getContent() {\n    if (props.error) {\n      return (\n        <div className=\"Loading-content\">\n          <div className=\"Loading-error\" />\n          <div>Failed to load content</div>\n        </div>\n      );\n    } else if (props.timedOut) {\n      return (\n        <div className=\"Loading-content\">\n          <div className=\"Loading-error\" />\n          <div>Timed out while loading content</div>\n        </div>\n      );\n    } else if (props.pastDelay) {\n      return (\n        <div className=\"Loading-content\">\n          <div className=\"Loading-spinner\" />\n          <div>Loading</div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n\n  return (\n    <div className=\"Loading\">\n      {getContent()}\n    </div>\n  );\n}\n\nexport default Loading;\n","import React from 'react';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport Loadable from 'react-loadable';\nimport AppNav from './Nav/AppNav';\nimport Loading from './Views/Loading';\nimport './App.scss';\n\nconst defaultTimeout = 10000;\n\nconst WordSearch = Loadable({\n  loader: () => import('./Views/Solvers/WordSearch'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst AutoConvert = Loadable({\n  loader: () => import('./Views/Encoding/AutoConvert'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Autokey = Loadable({\n  loader: () => import('./Views/Cipher/Autokey'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Braille = Loadable({\n  loader: () => import('./Views/Encoding/Braille'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Caesar = Loadable({\n  loader: () => import('./Views/Cipher/Caesar'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst CharacterEncodings = Loadable({\n  loader: () => import('./Views/Reference/CharacterEncodings'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Home = Loadable({\n  loader: () => import('./Views/Home'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Morse = Loadable({\n  loader: () => import('./Views/Encoding/Morse'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst NatoAlphabet = Loadable({\n  loader: () => import('./Views/Reference/NatoTable'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst NavalFlags = Loadable({\n  loader: () => import('./Views/Reference/NavalFlagTable'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst PigpenReference = Loadable({\n  loader: () => import('./Views/Reference/PigpenReference'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Resistors = Loadable({\n  loader: () => import('./Views/Reference/Resistors'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Semaphore = Loadable({\n  loader: () => import('./Views/Encoding/Semaphore'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Settings = Loadable({\n  loader: () => import('./Views/Settings'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Vigenere = Loadable({\n  loader: () => import('./Views/Cipher/Vigenere'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <AppNav />\n        <div className=\"App-content\">\n          <Route exact={true} path=\"/\" component={Home} />\n          <Route path=\"/cipher/autokey\" component={Autokey} />\n          <Route path=\"/cipher/caesar\" component={Caesar} />\n          <Route path=\"/cipher/vigenere\" component={Vigenere} />\n          <Route path=\"/encoding/autoconvert\" component={AutoConvert} />\n          <Route path=\"/encoding/braille\" component={Braille} />\n          <Route path=\"/encoding/morse\" component={Morse} />\n          <Route path=\"/encoding/pigpen\" component={PigpenReference} />\n          <Route path=\"/encoding/semaphore\" component={Semaphore} />\n          <Route path=\"/help/settings\" component={Settings} />\n          <Route path=\"/reference/characterencodings\" component={CharacterEncodings} />\n          <Route path=\"/reference/nato\" component={NatoAlphabet} />\n          <Route path=\"/reference/navalflags\" component={NavalFlags} />\n          <Route path=\"/reference/resistors\" component={Resistors} />\n          <Route path=\"/solvers/wordsearch\" component={WordSearch} />\n        </div>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          // tslint:disable-next-line:no-console\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              // tslint:disable-next-line:no-console\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              // tslint:disable-next-line:no-console\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      // tslint:disable-next-line:no-console\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      // tslint:disable-next-line:no-console\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n"],"sourceRoot":""}