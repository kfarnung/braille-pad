{"version":3,"sources":["Cipher/KeyedCipherStreamBase/KeyedCipherStreamBase.tsx","Cipher/Vigenere/VigenereStream.tsx","Views/Cipher/Vigenere.tsx"],"names":["KeyedCipherStreamBase","props","cipher","_input","React","createRef","_cipher","_conversion","state","conversion","key","output","text","element","this","current","focus","className","Header","prompt","Body","onChange","event","onTextChanged","placeholder","ref","value","onKeyChanged","name","onConversionChanged","type","onClick","onClearClick","variant","savedState","setState","encrypt","decrypt","target","updateState","LocalStorageComponent","VigenereStream","VigenereString","Vigenere","Component"],"mappings":"sTA6BeA,G,mBASb,WAAYC,EAA+BC,GAAgC,IAAD,8BACxE,4CAAMD,KALSE,OAASC,IAAMC,YAI0C,EAHzDC,aAGyD,IAFlEC,YAAc,EAKpB,EAAKD,QAAUJ,EACf,EAAKM,MAAQ,CACXC,WAAY,EACZC,IAAK,GACLC,OAAQ,GACRC,KAAM,IARgE,E,iFAaxE,0EAEA,IAAMC,EAAUC,KAAKX,OAAOY,QACxBF,GACFA,EAAQG,U,+BAIK,IAAD,OACd,OACE,yBAAKC,UAAU,yBACb,kBAAC,IAAD,CAAMA,UAAU,+BACd,kBAAC,IAAKC,OAAN,KAAcJ,KAAKb,MAAMkB,QACzB,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CACEC,SAAU,SAACC,GAAD,OAAwC,EAAKC,cAAcD,IACrEE,YAAY,OACZC,IAAKX,KAAKX,OACVuB,MAAOZ,KAAKN,MAAMI,OAEpB,kBAAC,IAAD,CACES,SAAU,SAACC,GAAD,OAAwC,EAAKK,aAAaL,IACpEE,YAAY,MACZE,MAAOZ,KAAKN,MAAME,MAEpB,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEkB,KAAK,mCACLP,SAAU,SAACK,GAAD,OAAmB,EAAKG,oBAAoBH,IACtDI,KAAK,QACLJ,MAAOZ,KAAKN,MAAMC,YAElB,kBAAC,IAAD,CAAciB,MAAO,GAArB,WACA,kBAAC,IAAD,CAAcA,MAAO,GAArB,YAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEK,QAAS,SAACT,GAAD,OAA0C,EAAKU,aAAaV,IACrEW,QAAQ,UAFV,aAUR,kBAAC,IAAD,CAAMhB,UAAU,gCACd,kBAAC,IAAKC,OAAN,eACA,kBAAC,IAAKE,KAAN,KACE,6BACGN,KAAKN,MAAMG,QAAU,U,oCAShC,MAAO,CACLF,WAAYK,KAAKP,YACjBG,IAAKI,KAAKR,QAAQI,IAClBE,KAAME,KAAKR,QAAQM,Q,qCAIEsB,GACJ,OAAfA,IACFpB,KAAKR,QAAQM,KAAOsB,EAAWtB,KAC/BE,KAAKR,QAAQI,IAAMwB,EAAWxB,IAC9BI,KAAKP,YAAc2B,EAAWzB,c,sCAKhCK,KAAKqB,SAAS,CACZ1B,WAAYK,KAAKP,YACjBG,IAAKI,KAAKR,QAAQI,IAClBC,OAA6B,IAArBG,KAAKP,YAAoBO,KAAKR,QAAQ8B,UAAYtB,KAAKR,QAAQ+B,UACvEzB,KAAME,KAAKR,QAAQM,S,oCAIDU,GACpB,IAAMT,EAAWS,EAAMgB,OACvBxB,KAAKR,QAAQM,KAAOC,EAAQa,MAC5BZ,KAAKyB,gB,mCAGcjB,GACnB,IAAMT,EAAWS,EAAMgB,OACvBxB,KAAKR,QAAQI,IAAMG,EAAQa,MAC3BZ,KAAKyB,gB,0CAGqBjB,GAC1BR,KAAKP,YAAce,EACnBR,KAAKyB,gB,mCAGcjB,GACnBR,KAAKR,QAAQI,IAAM,GACnBI,KAAKR,QAAQM,KAAO,GACpBE,KAAKP,YAAc,EAEnBO,KAAKyB,kB,GA9HCC,MAkIKxC,O,kKChJAyC,E,YATb,WAAYxC,GAAgC,qEACpCA,EAAO,IAAIyC,mB,kFAIjB,MAAO,qB,GANkB1C,KCFvB2C,G,wLAEF,OACE,yBAAK1B,UAAU,YACb,yBAAKA,UAAU,iBACb,+CACA,+NAKF,kBAAC,EAAD,CACEE,OAAO,mF,GAZMyB,cAmBRD","file":"static/js/16.e901cbca.chunk.js","sourcesContent":["import React, { FormEvent, MouseEvent } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Card from 'react-bootstrap/Card';\nimport FormControl, { FormControlProps } from 'react-bootstrap/FormControl';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport LocalStorageComponent from '../../Data/LocalStorageComponent';\nimport { KeyedCipherStringBase } from 'puzzle-lib';\nimport './KeyedCipherStreamBase.scss';\n\nexport interface KeyedCipherStreamProps {\n  prompt: JSX.Element | string;\n}\n\ninterface KeyedCipherStreamState {\n  conversion: number;\n  key: string;\n  output: string;\n  text: string;\n}\n\ninterface KeyedCipherStreamSavedState {\n  conversion: number;\n  key: string;\n  text: string;\n}\n\nabstract class KeyedCipherStreamBase\n  extends LocalStorageComponent<\n  KeyedCipherStreamProps,\n  KeyedCipherStreamState,\n  KeyedCipherStreamSavedState> {\n  private readonly _input = React.createRef<FormControl<\"input\"> & HTMLInputElement>();\n  private readonly _cipher: KeyedCipherStringBase;\n  private _conversion = 2;\n\n  constructor(props: KeyedCipherStreamProps, cipher: KeyedCipherStringBase) {\n    super(props);\n\n    this._cipher = cipher;\n    this.state = {\n      conversion: 0,\n      key: '',\n      output: '',\n      text: '',\n    };\n  }\n\n  public componentDidMount() {\n    super.componentDidMount();\n\n    const element = this._input.current;\n    if (element) {\n      element.focus();\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"KeyedCipherStreamBase\">\n        <Card className=\"KeyedCipherStreamBase-input\">\n          <Card.Header>{this.props.prompt}</Card.Header>\n          <Card.Body>\n            <FormControl\n              onChange={(event: FormEvent<FormControlProps>) => this.onTextChanged(event)}\n              placeholder=\"Text\"\n              ref={this._input}\n              value={this.state.text}\n            />\n            <FormControl\n              onChange={(event: FormEvent<FormControlProps>) => this.onKeyChanged(event)}\n              placeholder=\"Key\"\n              value={this.state.key}\n            />\n            <ButtonToolbar>\n              <ToggleButtonGroup<number>\n                name=\"KeyedCipherStreamBase-conversion\"\n                onChange={(value: number) => this.onConversionChanged(value)}\n                type=\"radio\"\n                value={this.state.conversion}\n              >\n                <ToggleButton value={1}>Encrypt</ToggleButton>\n                <ToggleButton value={2}>Decrypt</ToggleButton>\n              </ToggleButtonGroup>\n              <ButtonGroup>\n                <Button\n                  onClick={(event: MouseEvent<HTMLButtonElement>) => this.onClearClick(event)}\n                  variant=\"danger\"\n                >\n                  Clear\n                </Button>\n              </ButtonGroup>\n            </ButtonToolbar>\n          </Card.Body>\n        </Card>\n        <Card className=\"KeyedCipherStreamBase-output\">\n          <Card.Header>Output</Card.Header>\n          <Card.Body>\n            <pre>\n              {this.state.output || ' '}\n            </pre>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n\n  protected onSaveState() {\n    return {\n      conversion: this._conversion,\n      key: this._cipher.key,\n      text: this._cipher.text,\n    };\n  }\n\n  protected onRestoreState(savedState: KeyedCipherStreamSavedState | null) {\n    if (savedState !== null) {\n      this._cipher.text = savedState.text;\n      this._cipher.key = savedState.key;\n      this._conversion = savedState.conversion;\n    }\n  }\n\n  protected onUpdateState() {\n    this.setState({\n      conversion: this._conversion,\n      key: this._cipher.key,\n      output: this._conversion === 1 ? this._cipher.encrypt() : this._cipher.decrypt(),\n      text: this._cipher.text,\n    });\n  }\n\n  private onTextChanged(event: FormEvent<FormControlProps>) {\n    const element = (event.target as HTMLInputElement);\n    this._cipher.text = element.value;\n    this.updateState();\n  }\n\n  private onKeyChanged(event: FormEvent<FormControlProps>) {\n    const element = (event.target as HTMLInputElement);\n    this._cipher.key = element.value;\n    this.updateState();\n  }\n\n  private onConversionChanged(event: number) {\n    this._conversion = event;\n    this.updateState();\n  }\n\n  private onClearClick(event: MouseEvent<HTMLButtonElement>) {\n    this._cipher.key = '';\n    this._cipher.text = '';\n    this._conversion = 2;\n\n    this.updateState();\n  }\n}\n\nexport default KeyedCipherStreamBase;\n","import {\n  default as KeyedCipherStreamBase,\n  KeyedCipherStreamProps,\n} from '../KeyedCipherStreamBase/KeyedCipherStreamBase';\nimport { VigenereString } from 'puzzle-lib';\n\nclass VigenereStream extends KeyedCipherStreamBase {\n  constructor(props: KeyedCipherStreamProps) {\n    super(props, new VigenereString());\n  }\n\n  protected getLocalStorageKey() {\n    return 'VigenereStream';\n  }\n}\n\nexport default VigenereStream;\n","import React, { Component } from 'react';\nimport VigenereStream from '../../Cipher/Vigenere/VigenereStream';\nimport './Vigenere.scss';\n\nclass Vigenere extends Component {\n  public render() {\n    return (\n      <div className=\"Vigenere\">\n        <div className=\"Vigenere-info\">\n          <h2>Vigenere Cipher</h2>\n          <p>\n            A Vigenere cipher is a type of substitution cipher.  It shifts each letter by using a keyword.\n            For example, a the keyword \"ace\" would shift the first letter by 1, second by 3, and third by 5.\n            </p>\n        </div>\n        <VigenereStream\n          prompt=\"Enter the text you want to convert, and the keyword to shift the text by.\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Vigenere;\n"],"sourceRoot":""}