(this.webpackJsonppuzztool=this.webpackJsonppuzztool||[]).push([[13],{205:function(e,t,n){},238:function(e,t,n){"use strict";n.r(t);var c,o=n(77),s=n(49),r=(n(0),n(35)),i=n(50),a=n(81),l=n(31),j=n(65),u=n(44),d=n(97),x=n(78),h=n(85),b=n(100),O=(n(205),n(2));!function(e){e[e.consistent=0]="consistent",e[e.mixed=1]="mixed"}(c||(c={}));var m={clear:b.a,setHomogeneous:b.c,setText:b.d};var p=Object(x.b)((function(e){return{homogeneous:e.encoding.autoConvert.homogeneous,text:e.encoding.autoConvert.text}}),m)((function(e){var t=Object(h.a)();return Object(O.jsxs)("div",{className:"AutoConvertStream",children:[Object(O.jsxs)(l.a,{className:"AutoConvertStream-input",children:[Object(O.jsx)(l.a.Header,{children:e.prompt}),Object(O.jsxs)(l.a.Body,{children:[Object(O.jsx)(j.a,{onChange:function(t){e.setText(t.currentTarget.value)},placeholder:"Text",ref:t,value:e.text}),Object(O.jsxs)(a.a,{className:"AutoConvertStream-commands",children:[Object(O.jsxs)(d.a,{name:"options",onChange:function(t){return e.setHomogeneous(t===c.consistent)},type:"radio",value:e.homogeneous?c.consistent:c.mixed,children:[Object(O.jsx)(u.a,{value:c.consistent,children:"Consistent"}),Object(O.jsx)(u.a,{value:c.mixed,children:"Mixed"})]}),Object(O.jsx)(i.a,{children:Object(O.jsx)(r.a,{onClick:function(){e.clear()},variant:"danger",children:"Clear"})})]})]})]}),Object(O.jsxs)(l.a,{children:[Object(O.jsx)(l.a.Header,{children:"Output"}),Object(O.jsx)(l.a.Body,{children:Object(O.jsx)("pre",{className:"AutoConvertStream-output",children:s.StringAutoConvert.convertString(e.text,e.homogeneous)||" "})})]})]})}));t.default=function(){return Object(O.jsx)(o.a,{description:Object(O.jsxs)(O.Fragment,{children:[Object(O.jsx)("p",{children:'AutoConvert will automatically detect and convert several encodings - simply enter your ciphertext. If all of your text is in the same encoding, you can select "force consistent encoding". This can be useful for ambigious strings.'}),Object(O.jsx)("p",{children:"Some of the supported encodings are:"}),Object(O.jsxs)("ul",{children:[Object(O.jsx)("li",{children:"ASCII (A=65, B=66)"}),Object(O.jsx)("li",{children:"Five bit binary (A=00001, B=00010)"}),Object(O.jsx)("li",{children:"Eight bit binary (A=01100001, B=01100010)"}),Object(O.jsx)("li",{children:"Ordinal (A=1, B=2)"}),Object(O.jsx)("li",{children:"Ternary (A=001, E=012)"})]})]}),title:"AutoConvert",children:Object(O.jsx)(p,{prompt:"Input"})})}}}]);
//# sourceMappingURL=13.4c2e421b.chunk.js.map