{"version":3,"sources":["Cipher/KeyedCipherStreamBase/KeyedCipherStreamBase.tsx","Cipher/Autokey/AutokeyStream.tsx","Views/Cipher/Autokey.tsx"],"names":["KeyedCipherStreamBase","props","cipher","_this","Object","_home_travis_build_kfarnung_puzztool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","this","_home_travis_build_kfarnung_puzztool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","_home_travis_build_kfarnung_puzztool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","call","_input","React","createRef","_cipher","_conversion","state","conversion","key","output","text","_home_travis_build_kfarnung_puzztool_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_get__WEBPACK_IMPORTED_MODULE_4__","prototype","element","current","focus","_this2","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","react_bootstrap_Card__WEBPACK_IMPORTED_MODULE_10___default","Header","prompt","Body","react_bootstrap_FormControl__WEBPACK_IMPORTED_MODULE_11___default","onChange","event","onTextChanged","placeholder","ref","value","onKeyChanged","react_bootstrap_ButtonToolbar__WEBPACK_IMPORTED_MODULE_9___default","react_bootstrap_ToggleButtonGroup__WEBPACK_IMPORTED_MODULE_13___default","name","onConversionChanged","type","react_bootstrap_ToggleButton__WEBPACK_IMPORTED_MODULE_12___default","react_bootstrap_ButtonGroup__WEBPACK_IMPORTED_MODULE_8___default","react_bootstrap_Button__WEBPACK_IMPORTED_MODULE_7___default","onClick","onClearClick","variant","savedState","setState","encrypt","decrypt","target","updateState","LocalStorageComponent","AutokeyStream","classCallCheck","possibleConstructorReturn","getPrototypeOf","AutoKeyString","Autokey","react_default","Autokey_AutokeyStream","Component"],"mappings":"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","file":"static/js/15.16fd089e.chunk.js","sourcesContent":["import React, { FormEvent, MouseEvent } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Card from 'react-bootstrap/Card';\nimport FormControl, { FormControlProps } from 'react-bootstrap/FormControl';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport LocalStorageComponent from '../../Data/LocalStorageComponent';\nimport { KeyedCipherStringBase } from 'puzzle-lib';\nimport './KeyedCipherStreamBase.scss';\n\nexport interface KeyedCipherStreamProps {\n  prompt: JSX.Element | string;\n}\n\ninterface KeyedCipherStreamState {\n  conversion: number;\n  key: string;\n  output: string;\n  text: string;\n}\n\ninterface KeyedCipherStreamSavedState {\n  conversion: number;\n  key: string;\n  text: string;\n}\n\nabstract class KeyedCipherStreamBase\n  extends LocalStorageComponent<\n  KeyedCipherStreamProps,\n  KeyedCipherStreamState,\n  KeyedCipherStreamSavedState> {\n  private readonly _input = React.createRef<FormControl<\"input\"> & HTMLInputElement>();\n  private readonly _cipher: KeyedCipherStringBase;\n  private _conversion = 2;\n\n  constructor(props: KeyedCipherStreamProps, cipher: KeyedCipherStringBase) {\n    super(props);\n\n    this._cipher = cipher;\n    this.state = {\n      conversion: 0,\n      key: '',\n      output: '',\n      text: '',\n    };\n  }\n\n  public componentDidMount() {\n    super.componentDidMount();\n\n    const element = this._input.current;\n    if (element) {\n      element.focus();\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"KeyedCipherStreamBase\">\n        <Card className=\"KeyedCipherStreamBase-input\">\n          <Card.Header>{this.props.prompt}</Card.Header>\n          <Card.Body>\n            <FormControl\n              onChange={(event: FormEvent<FormControlProps>) => this.onTextChanged(event)}\n              placeholder=\"Text\"\n              ref={this._input}\n              value={this.state.text}\n            />\n            <FormControl\n              onChange={(event: FormEvent<FormControlProps>) => this.onKeyChanged(event)}\n              placeholder=\"Key\"\n              value={this.state.key}\n            />\n            <ButtonToolbar>\n              <ToggleButtonGroup<number>\n                name=\"KeyedCipherStreamBase-conversion\"\n                onChange={(value: number) => this.onConversionChanged(value)}\n                type=\"radio\"\n                value={this.state.conversion}\n              >\n                <ToggleButton value={1}>Encrypt</ToggleButton>\n                <ToggleButton value={2}>Decrypt</ToggleButton>\n              </ToggleButtonGroup>\n              <ButtonGroup>\n                <Button\n                  onClick={(event: MouseEvent<HTMLButtonElement>) => this.onClearClick(event)}\n                  variant=\"danger\"\n                >\n                  Clear\n                </Button>\n              </ButtonGroup>\n            </ButtonToolbar>\n          </Card.Body>\n        </Card>\n        <Card className=\"KeyedCipherStreamBase-output\">\n          <Card.Header>Output</Card.Header>\n          <Card.Body>\n            <pre>\n              {this.state.output || ' '}\n            </pre>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n\n  protected onSaveState() {\n    return {\n      conversion: this._conversion,\n      key: this._cipher.key,\n      text: this._cipher.text,\n    };\n  }\n\n  protected onRestoreState(savedState: KeyedCipherStreamSavedState | null) {\n    if (savedState !== null) {\n      this._cipher.text = savedState.text;\n      this._cipher.key = savedState.key;\n      this._conversion = savedState.conversion;\n    }\n  }\n\n  protected onUpdateState() {\n    this.setState({\n      conversion: this._conversion,\n      key: this._cipher.key,\n      output: this._conversion === 1 ? this._cipher.encrypt() : this._cipher.decrypt(),\n      text: this._cipher.text,\n    });\n  }\n\n  private onTextChanged(event: FormEvent<FormControlProps>) {\n    const element = (event.target as HTMLInputElement);\n    this._cipher.text = element.value;\n    this.updateState();\n  }\n\n  private onKeyChanged(event: FormEvent<FormControlProps>) {\n    const element = (event.target as HTMLInputElement);\n    this._cipher.key = element.value;\n    this.updateState();\n  }\n\n  private onConversionChanged(event: number) {\n    this._conversion = event;\n    this.updateState();\n  }\n\n  private onClearClick(event: MouseEvent<HTMLButtonElement>) {\n    this._cipher.key = '';\n    this._cipher.text = '';\n    this._conversion = 2;\n\n    this.updateState();\n  }\n}\n\nexport default KeyedCipherStreamBase;\n","import {\n  default as KeyedCipherStreamBase,\n  KeyedCipherStreamProps,\n} from '../KeyedCipherStreamBase/KeyedCipherStreamBase';\nimport { AutoKeyString } from 'puzzle-lib';\n\nclass AutokeyStream extends KeyedCipherStreamBase {\n  constructor(props: KeyedCipherStreamProps) {\n    super(props, new AutoKeyString());\n  }\n\n  protected getLocalStorageKey() {\n    return 'AutokeyStream';\n  }\n}\n\nexport default AutokeyStream;\n","import React, { Component } from 'react';\nimport AutokeyStream from '../../Cipher/Autokey/AutokeyStream';\nimport './Autokey.scss';\n\nclass Autokey extends Component {\n  public render() {\n    return (\n      <div className=\"Autokey\">\n        <div className=\"Autokey-info\">\n          <h2>Autokey Cipher</h2>\n          <p>\n            An autokey cipher is similar to a Vigenere cipher, where the plaintext is used after the key runs out.\n            This addresses the key length repetition issues with the Vigenere cipher.\n            </p>\n        </div>\n        <AutokeyStream\n          prompt=\"Enter the text and key, and select encrypt or decrypt.\"\n        />\n      </div>\n    );\n  }\n}\n\nexport default Autokey;\n"],"sourceRoot":""}