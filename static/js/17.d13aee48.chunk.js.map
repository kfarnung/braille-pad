{"version":3,"sources":["Conversion/AutoConversion/AutoConvertStream.tsx","Views/Encoding/AutoConvert.tsx"],"names":["AutoConvertStream","props","_input","React","createRef","_text","_useConsistentEncoding","state","text","output","homogeneous","element","this","current","focus","className","Header","prompt","Body","onChange","event","onTextChanged","placeholder","ref","value","defaultValue","name","requireConsistentEncoding","type","onClick","onClearClick","variant","savedState","setState","calculateOutput","target","updateState","StringAutoConvert","convertString","LocalStorageComponent","AutoConvert","Component"],"mappings":"kXA8IeA,G,mBA/Gb,WAAYC,GAAe,IAAD,8BACxB,4CAAMA,KALSC,OAASC,IAAMC,YAIN,EAHlBC,MAAQ,GAGU,EAFlBC,wBAAyB,EAK/B,EAAKC,MAAQ,CACXC,KAAM,GACNC,OAAQ,GACRC,aAAa,GANS,E,iFAWxB,0EAEA,IAAMC,EAAUC,KAAKV,OAAOW,QACxBF,GACFA,EAAQG,U,+BAIK,IAAD,OACd,OACE,yBAAKC,UAAU,qBACb,kBAAC,IAAD,CAAMA,UAAU,2BACd,kBAAC,IAAKC,OAAN,KAAcJ,KAAKX,MAAMgB,QACzB,kBAAC,IAAKC,KAAN,KACE,kBAAC,IAAD,CACEC,SAAU,SAACC,GAAD,OAAwC,EAAKC,cAAcD,IACrEE,YAAY,OACZC,IAAKX,KAAKV,OACVsB,MAAOZ,KAAKL,MAAMC,OAEpB,kBAAC,IAAD,CAAeO,UAAU,8BACvB,kBAAC,IAAD,CACEU,cAAc,EACdC,KAAK,UACLP,SAAU,SAACK,GAAD,OAAW,EAAKG,0BAA0BH,IACpDI,KAAK,SAEL,kBAAC,IAAD,CAAcJ,OAAO,GAArB,cACA,kBAAC,IAAD,CAAcA,OAAO,GAArB,UAEF,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEK,QAAS,kBAAM,EAAKC,gBACpBC,QAAQ,UAFV,aAUR,kBAAC,IAAD,KACE,kBAAC,IAAKf,OAAN,eACA,kBAAC,IAAKE,KAAN,KACE,yBAAKH,UAAU,4BACZH,KAAKL,MAAME,QAAU,U,2CAShC,MAAO,sB,oCAIP,MAAO,CACLD,KAAMI,KAAKP,MACXK,YAAaE,KAAKN,0B,qCAIG0B,GACJ,OAAfA,IACFpB,KAAKP,MAAQ2B,EAAWxB,KACxBI,KAAKN,uBAAyB0B,EAAWtB,e,sCAK3CE,KAAKqB,SAAS,CACZzB,KAAMI,KAAKP,MACXI,OAAQG,KAAKsB,kBACbxB,YAAaE,KAAKN,2B,oCAIAc,GACpB,IAAMT,EAAWS,EAAMe,OACvBvB,KAAKP,MAAQM,EAAQa,MACrBZ,KAAKwB,gB,qCAILxB,KAAKP,MAAQ,GACbO,KAAKwB,gB,gDAG2BZ,GAChCZ,KAAKN,uBAAyBkB,EAC9BZ,KAAKwB,gB,wCAIL,OAAOC,oBAAkBC,cAAc1B,KAAKP,MAAOO,KAAKN,4B,GAhH5BiC,MCtB1BC,G,wLAEF,OACE,yBAAKzB,UAAU,eACb,yBAAKA,UAAU,oBACb,2CACA,qQAKA,mEAGA,4BACE,kDACA,kEACA,yEACA,oDAGJ,kBAAC,EAAD,CACEE,OAAO,e,GAtBSwB,cA4BXD","file":"static/js/17.d13aee48.chunk.js","sourcesContent":["import React, { FormEvent } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Card from 'react-bootstrap/Card';\nimport FormControl, { FormControlProps } from 'react-bootstrap/FormControl';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport LocalStorageComponent from '../../Data/LocalStorageComponent';\nimport { StringAutoConvert } from 'puzzle-lib';\nimport './AutoConvertStream.scss';\n\ntype Props = {\n  prompt: JSX.Element | string;\n};\ntype State = {\n  text: string,\n  output: string,\n  homogeneous: boolean\n};\n\ntype SavedState = {\n  text: string,\n  homogeneous: boolean,\n};\n\nclass AutoConvertStream extends LocalStorageComponent<Props, State, SavedState> {\n  private readonly _input = React.createRef<FormControl<\"input\"> & HTMLInputElement>();\n  private _text = '';\n  private _useConsistentEncoding = true;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      text: '',\n      output: '',\n      homogeneous: true,\n    };\n  }\n\n  public componentDidMount() {\n    super.componentDidMount();\n\n    const element = this._input.current;\n    if (element) {\n      element.focus();\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"AutoConvertStream\">\n        <Card className=\"AutoConvertStream-input\">\n          <Card.Header>{this.props.prompt}</Card.Header>\n          <Card.Body>\n            <FormControl\n              onChange={(event: FormEvent<FormControlProps>) => this.onTextChanged(event)}\n              placeholder=\"Text\"\n              ref={this._input}\n              value={this.state.text}\n            />\n            <ButtonToolbar className=\"AutoConvertStream-commands\">\n              <ToggleButtonGroup<boolean>\n                defaultValue={true}\n                name=\"options\"\n                onChange={(value) => this.requireConsistentEncoding(value)}\n                type=\"radio\"\n              >\n                <ToggleButton value={true}>Consistent</ToggleButton>\n                <ToggleButton value={false}>Mixed</ToggleButton>\n              </ToggleButtonGroup>\n              <ButtonGroup>\n                <Button\n                  onClick={() => this.onClearClick()}\n                  variant=\"danger\"\n                >\n                  Clear\n                </Button>\n              </ButtonGroup>\n            </ButtonToolbar>\n          </Card.Body>\n        </Card>\n        <Card>\n          <Card.Header>Output</Card.Header>\n          <Card.Body>\n            <pre className=\"AutoConvertStream-output\">\n              {this.state.output || ' '}\n            </pre>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n\n  protected getLocalStorageKey() {\n    return 'AutoConvertStream';\n  }\n\n  protected onSaveState() {\n    return {\n      text: this._text,\n      homogeneous: this._useConsistentEncoding,\n    };\n  }\n\n  protected onRestoreState(savedState: SavedState | null) {\n    if (savedState !== null) {\n      this._text = savedState.text;\n      this._useConsistentEncoding = savedState.homogeneous;\n    }\n  }\n\n  protected onUpdateState() {\n    this.setState({\n      text: this._text,\n      output: this.calculateOutput(),\n      homogeneous: this._useConsistentEncoding,\n    });\n  }\n\n  private onTextChanged(event: FormEvent<FormControlProps>) {\n    const element = (event.target as HTMLInputElement);\n    this._text = element.value;\n    this.updateState();\n  }\n\n  private onClearClick() {\n    this._text = '';\n    this.updateState();\n  }\n\n  private requireConsistentEncoding(value: boolean) {\n    this._useConsistentEncoding = value;\n    this.updateState();\n  }\n\n  private calculateOutput() {\n    return StringAutoConvert.convertString(this._text, this._useConsistentEncoding);\n  }\n}\n\nexport default AutoConvertStream;\n","import React, { Component } from 'react';\nimport AutoConvertStream from '../../Conversion/AutoConversion/AutoConvertStream';\nimport './AutoConvert.scss';\n\nclass AutoConvert extends Component {\n  public render() {\n    return (\n      <div className=\"AutoConvert\">\n        <div className=\"AutoConvert-info\">\n          <h2>AutoConvert</h2>\n          <p>\n            AutoConvert will automatically detect and convert several encodings - simply enter your ciphertext.\n            If all of your text is in the same encoding, you can select \"force consistent encoding\".\n            This can be useful for ambigious strings.\n            </p>\n          <p>\n            Some of the supported encodings are:\n            </p>\n          <ul>\n            <li>ASCII (A=65, B=66)</li>\n            <li>Five bit binary (A=00001, B=00010)</li>\n            <li>Eight bit binary (A=01100001, B=01100010)</li>\n            <li>Ordinal (A=1, B=2)</li>\n          </ul>\n        </div>\n        <AutoConvertStream\n          prompt=\"Input\" />\n      </div>\n    );\n  }\n}\n\nexport default AutoConvert;\n"],"sourceRoot":""}