{"version":3,"sources":["Views/Loading.tsx","App.tsx","serviceWorker.ts","index.tsx","Data/RouteData.ts"],"names":["Loading","className","this","getContent","props","error","timedOut","pastDelay","Component","WordSearch","Loadable","loader","loading","timeout","AutoConvert","Autokey","Braille","Caesar","CharacterEncodings","Home","Morse","NatoAlphabet","NavalFlags","PigpenReference","Resistors","Semaphore","Settings","Vigenere","App","renderNavbar","exact","path","component","categoryName","toLowerCase","replace","concat","RouteData","getCategories","map","category","key","name","onClick","e","preventDefault","to","rootUrl","id","getCategoryDropdownId","title","children","child","url","Item","eventKey","bg","collapseOnSelect","expand","onSelect","document","activeElement","blur","sticky","variant","Brand","Toggle","Collapse","renderNavbarCategories","Link","href","target","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","getRoutes","categories","description"],"mappings":"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","file":"static/js/main.01c81c58.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport * as Loadable from 'react-loadable';\nimport './Loading.scss';\n\nclass Loading extends Component<Loadable.LoadingComponentProps> {\n  public render() {\n    return (\n      <div className=\"Loading\">\n        {this.getContent()}\n      </div>\n    );\n  }\n\n  private getContent() {\n    if (this.props.error) {\n      return (\n        <div className=\"Loading-content\">\n          <div className=\"Loading-error\" />\n          <div>Failed to load content</div>\n        </div>\n      );\n    } else if (this.props.timedOut) {\n      return (\n        <div className=\"Loading-content\">\n          <div className=\"Loading-error\" />\n          <div>Timed out while loading content</div>\n        </div>\n      );\n    } else if (this.props.pastDelay) {\n      return (\n        <div className=\"Loading-content\">\n          <div className=\"Loading-spinner\" />\n          <div>Loading</div>\n        </div>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\nexport default Loading;\n","import React, { Component } from 'react';\nimport Nav from 'react-bootstrap/Nav';\nimport Navbar from 'react-bootstrap/Navbar';\nimport NavDropdown from 'react-bootstrap/NavDropdown';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport { LinkContainer } from 'react-router-bootstrap';\nimport Loadable from 'react-loadable';\nimport { RouteData } from './Data/RouteData';\nimport Loading from './Views/Loading';\nimport './App.scss';\n\nconst defaultTimeout = 10000;\n\nconst WordSearch = Loadable({\n  loader: () => import('./Views/Solvers/WordSearch'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst AutoConvert = Loadable({\n  loader: () => import('./Views/Encoding/AutoConvert'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Autokey = Loadable({\n  loader: () => import('./Views/Cipher/Autokey'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Braille = Loadable({\n  loader: () => import('./Views/Encoding/Braille'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Caesar = Loadable({\n  loader: () => import('./Views/Cipher/Caesar'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst CharacterEncodings = Loadable({\n  loader: () => import('./Views/Reference/CharacterEncodings'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Home = Loadable({\n  loader: () => import('./Views/Home'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Morse = Loadable({\n  loader: () => import('./Views/Encoding/Morse'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst NatoAlphabet = Loadable({\n  loader: () => import('./Views/Reference/NatoTable'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst NavalFlags = Loadable({\n  loader: () => import('./Views/Reference/NavalFlagTable'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst PigpenReference = Loadable({\n  loader: () => import('./Views/Reference/PigpenReference'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Resistors = Loadable({\n  loader: () => import('./Views/Reference/Resistors'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Semaphore = Loadable({\n  loader: () => import('./Views/Encoding/Semaphore'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Settings = Loadable({\n  loader: () => import('./Views/Settings'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nconst Vigenere = Loadable({\n  loader: () => import('./Views/Cipher/Vigenere'),\n  loading: Loading,\n  timeout: defaultTimeout,\n});\n\nclass App extends Component {\n  public render() {\n    return (\n      <Router>\n        <div className=\"App\">\n          {this.renderNavbar()}\n          <div className=\"App-content\">\n            <Route exact={true} path=\"/\" component={Home} />\n            <Route path=\"/cipher/autokey\" component={Autokey} />\n            <Route path=\"/cipher/caesar\" component={Caesar} />\n            <Route path=\"/cipher/vigenere\" component={Vigenere} />\n            <Route path=\"/encoding/autoconvert\" component={AutoConvert} />\n            <Route path=\"/encoding/braille\" component={Braille} />\n            <Route path=\"/encoding/morse\" component={Morse} />\n            <Route path=\"/encoding/pigpen\" component={PigpenReference} />\n            <Route path=\"/encoding/semaphore\" component={Semaphore} />\n            <Route path=\"/help/settings\" component={Settings} />\n            <Route path=\"/reference/characterencodings\" component={CharacterEncodings} />\n            <Route path=\"/reference/nato\" component={NatoAlphabet} />\n            <Route path=\"/reference/navalflags\" component={NavalFlags} />\n            <Route path=\"/reference/resistors\" component={Resistors} />\n            <Route path=\"/solvers/wordsearch\" component={WordSearch} />\n          </div>\n        </div>\n      </Router>\n    );\n  }\n\n  private getCategoryDropdownId(categoryName: string) {\n    return categoryName.toLowerCase().replace(/[^a-z]/, '').concat('-dropdown');\n  }\n\n  private renderNavbarCategories() {\n    return RouteData.getCategories().map((category) => (\n      <LinkContainer\n        key={category.name}\n        onClick={(e) => e.preventDefault()}\n        to={category.rootUrl}\n      >\n        <NavDropdown\n          id={this.getCategoryDropdownId(category.name)}\n          title={category.name}\n        >\n          {category.children.map((child) => (\n            <LinkContainer\n              key={`${category.name}-${child.name}`}\n              to={category.rootUrl + child.url}\n            >\n              <NavDropdown.Item eventKey={category.name + child.name}>\n                {child.name}\n              </NavDropdown.Item>\n            </LinkContainer>\n          ))}\n        </NavDropdown>\n      </LinkContainer>\n    ));\n  }\n\n  private renderNavbar() {\n    return (\n      <Navbar\n        bg=\"dark\"\n        collapseOnSelect={true}\n        expand=\"md\"\n        // Remove focus from the selected element to prevent it from taking\n        // further keyboard input.\n        onSelect={() => (document.activeElement as HTMLElement).blur()}\n        sticky=\"top\"\n        variant=\"dark\"\n      >\n        <LinkContainer to=\"/\">\n          <Navbar.Brand>PuzzTool</Navbar.Brand>\n        </LinkContainer>\n        <Navbar.Toggle />\n        <Navbar.Collapse>\n          <Nav>\n            {this.renderNavbarCategories()}\n          </Nav>\n          <Nav>\n            <LinkContainer to=\"/help\" onClick={(e) => e.preventDefault()}>\n              <NavDropdown title=\"Help\" id=\"help-dropdown\">\n                <LinkContainer to=\"/help/settings\">\n                  <NavDropdown.Item eventKey=\"Help.Settings\">Settings</NavDropdown.Item>\n                </LinkContainer>\n              </NavDropdown>\n            </LinkContainer>\n            <Nav.Link\n              eventKey=\"Help.Feedback\"\n              href=\"https://github.com/puzztool/puzztool/issues/new\"\n              target=\"_blank\"\n            >\n              Feedback\n            </Nav.Link>\n          </Nav>\n        </Navbar.Collapse>\n      </Navbar>\n    );\n  }\n}\n\nexport default App;\n","// tslint:disable:no-console\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.register();\n","export interface RouteChild {\r\n    description: string;\r\n    name: string;\r\n    url: string;\r\n}\r\n\r\nexport interface RouteCategory {\r\n    children: RouteChild[];\r\n    description: string;\r\n    name: string;\r\n    rootUrl: string;\r\n}\r\n\r\nexport interface RoutesInfo {\r\n    categories: RouteCategory[];\r\n    name: string;\r\n}\r\n\r\nexport class RouteData {\r\n    public static getCategories() {\r\n        return RouteData.getRoutes().categories;\r\n    }\r\n\r\n    private static getRoutes(): RoutesInfo {\r\n        return {\r\n            categories: [\r\n                {\r\n                    children: [\r\n                        {\r\n                            description: 'Word Search Solver',\r\n                            name: 'Word Search',\r\n                            url: '/wordsearch',\r\n                        },\r\n                    ],\r\n                    description: 'Automated puzzle solvers',\r\n                    name: 'Solvers',\r\n                    rootUrl: '/solvers',\r\n                },\r\n                {\r\n                    children: [\r\n                        {\r\n                            description: ' A Vignere cipher which uses plaintext as the key',\r\n                            name: 'Autokey',\r\n                            url: '/autokey',\r\n                        },\r\n                        {\r\n                            description: 'Letters are shifted by a fixed value',\r\n                            name: 'Caesar',\r\n                            url: '/caesar',\r\n                        },\r\n                        {\r\n                            description: 'Letters are mapped based on a key word',\r\n                            name: 'Vignere',\r\n                            url: '/vigenere',\r\n                        },\r\n                    ],\r\n                    description: 'Scrambled letters',\r\n                    name: 'Ciphers',\r\n                    rootUrl: '/cipher',\r\n                },\r\n                {\r\n                    children: [\r\n                        {\r\n                            description: 'Mapping numbers to letters (ASCII, Binary, Ordinal)',\r\n                            name: 'AutoConvert',\r\n                            url: '/autoconvert',\r\n                        },\r\n                        {\r\n                            description: 'Six dots in a two-by-three grid',\r\n                            name: 'Braille',\r\n                            url: '/braille',\r\n                        },\r\n                        {\r\n                            description: 'Dots and dashes with separations',\r\n                            name: 'Morse Code',\r\n                            url: '/morse',\r\n                        },\r\n                        {\r\n                            description: 'Parts of a tic-tac-toe grid or X, some with dot',\r\n                            name: 'Pigpen',\r\n                            url: '/pigpen',\r\n                        },\r\n                        {\r\n                            description: ' Positions of two different flags',\r\n                            name: 'Semaphore',\r\n                            url: '/semaphore',\r\n                        },\r\n                    ],\r\n                    description: 'Different ways to represent letters',\r\n                    name: 'Encodings',\r\n                    rootUrl: '/encoding',\r\n                },\r\n                {\r\n                    children: [\r\n                        {\r\n                            description: 'Static display of number to letter mapping',\r\n                            name: 'Character Encodings',\r\n                            url: '/characterencodings',\r\n                        },\r\n                        {\r\n                            description: 'Words used to clearly identify a letter',\r\n                            name: 'NATO Alphabet',\r\n                            url: '/nato',\r\n                        },\r\n                        {\r\n                            description: 'Different simple flags which convey a letter',\r\n                            name: 'Naval Flags',\r\n                            url: '/navalflags',\r\n                        },\r\n                        {\r\n                            description: 'Find a resistor value using different colored bands',\r\n                            name: 'Resistors',\r\n                            url: '/resistors',\r\n                        }\r\n                    ],\r\n                    description: 'Miscellaneous information',\r\n                    name: 'Reference',\r\n                    rootUrl: '/reference',\r\n                }\r\n            ],\r\n            name: 'Puzztool',\r\n        };\r\n    }\r\n}\r\n"],"sourceRoot":""}