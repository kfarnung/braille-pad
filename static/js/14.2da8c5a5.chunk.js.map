{"version":3,"sources":["Features/Encoding/AutoConvert/AutoConvertStream.tsx","Features/Encoding/AutoConvert/index.tsx"],"names":["mapDispatchToProps","clear","setHomogeneous","setText","connector","connect","state","homogeneous","encoding","autoConvert","text","props","inputRef","useFocusInput","className","Card","Header","prompt","Body","FormControl","onChange","event","currentTarget","value","placeholder","ref","ButtonToolbar","ToggleButtonGroup","defaultValue","name","type","ToggleButton","ButtonGroup","Button","onClick","variant","StringAutoConvert","convertString","AutoConvert","PuzzToolPage","description","title"],"mappings":"gQAeA,MAIMA,EAAqB,CACzBC,UACAC,mBACAC,aAgEaC,MA7DGC,YAVOC,IAAD,CACtBC,YAAaD,EAAME,SAASC,YAAYF,YACxCG,KAAMJ,EAAME,SAASC,YAAYC,OAQQV,EA6D5BI,EAvDf,SAA2BO,GACzB,MAAMC,EAAWC,cAUjB,OACE,yBAAKC,UAAU,qBACb,kBAACC,EAAA,EAAD,CAAMD,UAAU,2BACd,kBAACC,EAAA,EAAKC,OAAN,KAAcL,EAAMM,QACpB,kBAACF,EAAA,EAAKG,KAAN,KACE,kBAACC,EAAA,EAAD,CACEC,SAVV,SAAuBC,GACrBV,EAAMR,QAAQkB,EAAMC,cAAcC,QAU1BC,YAAY,OACZC,IAAKb,EACLW,MAAOZ,EAAMD,OAEf,kBAACgB,EAAA,EAAD,CAAeZ,UAAU,8BACvB,kBAACa,EAAA,EAAD,CACEC,cAAc,EACdC,KAAK,UACLT,SAAUT,EAAMT,eAChB4B,KAAK,SAEL,kBAACC,EAAA,EAAD,CAAcR,OAAO,GAArB,cACA,kBAACQ,EAAA,EAAD,CAAcR,OAAO,GAArB,UAEF,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CACEC,QA/Bd,WACEvB,EAAMV,SA+BMkC,QAAQ,UAFV,aAUR,kBAACpB,EAAA,EAAD,KACE,kBAACA,EAAA,EAAKC,OAAN,eACA,kBAACD,EAAA,EAAKG,KAAN,KACE,yBAAKJ,UAAU,4BACZsB,oBAAkBC,cAAc1B,EAAMD,KAAMC,EAAMJ,cAAgB,WC7ChE+B,UARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAcC,YArBd,oCACE,qQAKA,mEAGA,4BACE,kDACA,kEACA,yEACA,oDAQyCC,MAAM,eACjD,kBAAC,EAAD,CAAmBxB,OAAO","file":"static/js/14.2da8c5a5.chunk.js","sourcesContent":["import { StringAutoConvert } from 'puzzle-lib';\nimport React, { ChangeEvent } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Card from 'react-bootstrap/Card';\nimport FormControl from 'react-bootstrap/FormControl';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useFocusInput } from '../../../Hooks/FocusInput';\nimport { RootState } from '../../../Store/rootReducer';\nimport { clear, setHomogeneous, setText } from './autoConvertSlice';\nimport './AutoConvertStream.scss';\n\nconst mapStateToProps = (state: RootState) => ({\n  homogeneous: state.encoding.autoConvert.homogeneous,\n  text: state.encoding.autoConvert.text,\n});\nconst mapDispatchToProps = {\n  clear,\n  setHomogeneous,\n  setText,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\ninterface Props extends ConnectedProps<typeof connector> {\n  prompt: JSX.Element | string;\n}\n\nfunction AutoConvertStream(props: Props) {\n  const inputRef = useFocusInput();\n\n  function onClearClick() {\n    props.clear();\n  }\n\n  function onTextChanged(event: ChangeEvent<HTMLInputElement>) {\n    props.setText(event.currentTarget.value);\n  }\n\n  return (\n    <div className=\"AutoConvertStream\">\n      <Card className=\"AutoConvertStream-input\">\n        <Card.Header>{props.prompt}</Card.Header>\n        <Card.Body>\n          <FormControl\n            onChange={onTextChanged}\n            placeholder=\"Text\"\n            ref={inputRef}\n            value={props.text}\n          />\n          <ButtonToolbar className=\"AutoConvertStream-commands\">\n            <ToggleButtonGroup\n              defaultValue={true}\n              name=\"options\"\n              onChange={props.setHomogeneous}\n              type=\"radio\"\n            >\n              <ToggleButton value={true}>Consistent</ToggleButton>\n              <ToggleButton value={false}>Mixed</ToggleButton>\n            </ToggleButtonGroup>\n            <ButtonGroup>\n              <Button\n                onClick={onClearClick}\n                variant=\"danger\"\n              >\n                Clear\n              </Button>\n            </ButtonGroup>\n          </ButtonToolbar>\n        </Card.Body>\n      </Card>\n      <Card>\n        <Card.Header>Output</Card.Header>\n        <Card.Body>\n          <pre className=\"AutoConvertStream-output\">\n            {StringAutoConvert.convertString(props.text, props.homogeneous) || ' '}\n          </pre>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n}\n\nexport default connector(AutoConvertStream);\n","import React from 'react';\nimport PuzzToolPage from '../../../Common/PuzzToolPage';\nimport AutoConvertStream from './AutoConvertStream';\n\nfunction getDescription() {\n  return (\n    <>\n      <p>\n        AutoConvert will automatically detect and convert several encodings - simply enter your ciphertext.\n        If all of your text is in the same encoding, you can select \"force consistent encoding\".\n        This can be useful for ambigious strings.\n      </p>\n      <p>\n        Some of the supported encodings are:\n      </p>\n      <ul>\n        <li>ASCII (A=65, B=66)</li>\n        <li>Five bit binary (A=00001, B=00010)</li>\n        <li>Eight bit binary (A=01100001, B=01100010)</li>\n        <li>Ordinal (A=1, B=2)</li>\n      </ul>\n    </>\n  );\n}\n\nfunction AutoConvert() {\n  return (\n    <PuzzToolPage description={getDescription()} title=\"AutoConvert\">\n      <AutoConvertStream prompt=\"Input\" />\n    </PuzzToolPage>\n  );\n}\n\nexport default AutoConvert;\n"],"sourceRoot":""}