{"version":3,"sources":["Conversion/AutoConversion/AutoConvertStream.tsx","Views/Encoding/AutoConvert.tsx"],"names":["AutoConvertStream","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","_input","React","createRef","_text","_useConsistentEncoding","state","text","output","homogeneous","get","prototype","element","current","focus","_this2","react_default","a","createElement","className","Card_default","Header","prompt","Body","FormControl_default","onChange","event","onTextChanged","placeholder","ref","value","ButtonToolbar_default","ToggleButtonGroup_default","defaultValue","name","requireConsistentEncoding","type","ToggleButton_default","ButtonGroup_default","Button_default","onClick","onClearClick","variant","savedState","setState","calculateOutput","target","updateState","StringAutoConvert","convertString","LocalStorageComponent","AutoConvert","Conversion_AutoConversion_AutoConvertStream","Component"],"mappings":"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","file":"static/js/17.82615c1b.chunk.js","sourcesContent":["import React, { FormEvent } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\nimport Card from 'react-bootstrap/Card';\nimport FormControl, { FormControlProps } from 'react-bootstrap/FormControl';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport ToggleButtonGroup from 'react-bootstrap/ToggleButtonGroup';\nimport LocalStorageComponent from '../../Data/LocalStorageComponent';\nimport { StringAutoConvert } from 'puzzle-lib';\nimport './AutoConvertStream.scss';\n\ntype Props = {\n  prompt: JSX.Element | string;\n};\ntype State = {\n  text: string,\n  output: string,\n  homogeneous: boolean\n};\n\ntype SavedState = {\n  text: string,\n  homogeneous: boolean,\n};\n\nclass AutoConvertStream extends LocalStorageComponent<Props, State, SavedState> {\n  private readonly _input = React.createRef<FormControl<\"input\"> & HTMLInputElement>();\n  private _text = '';\n  private _useConsistentEncoding = true;\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      text: '',\n      output: '',\n      homogeneous: true,\n    };\n  }\n\n  public componentDidMount() {\n    super.componentDidMount();\n\n    const element = this._input.current;\n    if (element) {\n      element.focus();\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"AutoConvertStream\">\n        <Card className=\"AutoConvertStream-input\">\n          <Card.Header>{this.props.prompt}</Card.Header>\n          <Card.Body>\n            <FormControl\n              onChange={(event: FormEvent<FormControlProps>) => this.onTextChanged(event)}\n              placeholder=\"Text\"\n              ref={this._input}\n              value={this.state.text}\n            />\n            <ButtonToolbar className=\"AutoConvertStream-commands\">\n              <ToggleButtonGroup<boolean>\n                defaultValue={true}\n                name=\"options\"\n                onChange={(value) => this.requireConsistentEncoding(value)}\n                type=\"radio\"\n              >\n                <ToggleButton value={true}>Consistent</ToggleButton>\n                <ToggleButton value={false}>Mixed</ToggleButton>\n              </ToggleButtonGroup>\n              <ButtonGroup>\n                <Button\n                  onClick={() => this.onClearClick()}\n                  variant=\"danger\"\n                >\n                  Clear\n                </Button>\n              </ButtonGroup>\n            </ButtonToolbar>\n          </Card.Body>\n        </Card>\n        <Card>\n          <Card.Header>Output</Card.Header>\n          <Card.Body>\n            <pre className=\"AutoConvertStream-output\">\n              {this.state.output || ' '}\n            </pre>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n\n  protected getLocalStorageKey() {\n    return 'AutoConvertStream';\n  }\n\n  protected onSaveState() {\n    return {\n      text: this._text,\n      homogeneous: this._useConsistentEncoding,\n    };\n  }\n\n  protected onRestoreState(savedState: SavedState | null) {\n    if (savedState !== null) {\n      this._text = savedState.text;\n      this._useConsistentEncoding = savedState.homogeneous;\n    }\n  }\n\n  protected onUpdateState() {\n    this.setState({\n      text: this._text,\n      output: this.calculateOutput(),\n      homogeneous: this._useConsistentEncoding,\n    });\n  }\n\n  private onTextChanged(event: FormEvent<FormControlProps>) {\n    const element = (event.target as HTMLInputElement);\n    this._text = element.value;\n    this.updateState();\n  }\n\n  private onClearClick() {\n    this._text = '';\n    this.updateState();\n  }\n\n  private requireConsistentEncoding(value: boolean) {\n    this._useConsistentEncoding = value;\n    this.updateState();\n  }\n\n  private calculateOutput() {\n    return StringAutoConvert.convertString(this._text, this._useConsistentEncoding);\n  }\n}\n\nexport default AutoConvertStream;\n","import React, { Component } from 'react';\nimport AutoConvertStream from '../../Conversion/AutoConversion/AutoConvertStream';\nimport './AutoConvert.scss';\n\nclass AutoConvert extends Component {\n  public render() {\n    return (\n      <div className=\"AutoConvert\">\n        <div className=\"AutoConvert-info\">\n          <h2>AutoConvert</h2>\n          <p>\n            AutoConvert will automatically detect and convert several encodings - simply enter your ciphertext.\n            If all of your text is in the same encoding, you can select \"force consistent encoding\".\n            This can be useful for ambigious strings.\n            </p>\n          <p>\n            Some of the supported encodings are:\n            </p>\n          <ul>\n            <li>ASCII (A=65, B=66)</li>\n            <li>Five bit binary (A=00001, B=00010)</li>\n            <li>Eight bit binary (A=01100001, B=01100010)</li>\n            <li>Ordinal (A=1, B=2)</li>\n          </ul>\n        </div>\n        <AutoConvertStream\n          prompt=\"Input\" />\n      </div>\n    );\n  }\n}\n\nexport default AutoConvert;\n"],"sourceRoot":""}